/*
 * Copyright Cedar Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#![no_main]
use cedar_drt::{logger::initialize_log, CedarLeanEngine};

use cedar_drt_inner::{
    fuzz_target,
    symcc::{compile_policies, BuffSolver},
};

use cedar_policy::{Policy, PolicySet, Schema};

use cedar_policy_generators::{
    abac::ABACPolicy, hierarchy::HierarchyGenerator, schema, settings::ABACSettings,
};

use libfuzzer_sys::arbitrary::{self, Arbitrary, MaxRecursionReached, Unstructured};
use log::debug;
use std::convert::TryFrom;

use cedar_policy_symcc::{compile_always_allows, CedarSymCompiler, SymEnv, WellFormedAsserts};

use std::sync::LazyLock;

static RUNTIME: LazyLock<tokio::runtime::Runtime> = LazyLock::new(|| {
    tokio::runtime::Builder::new_current_thread()
        .enable_all()
        .build()
        .unwrap()
});

/// Limit the number of request environments so that we don't produce slow units
const MAX_REQ_ENV_NUM: usize = 128;

/// Input expected by this fuzz target
#[derive(Debug, Clone)]
pub struct FuzzTargetInput {
    /// generated schema
    pub schema: schema::Schema,
    /// generated policy
    pub policy: ABACPolicy,
}

/// settings for this fuzz target
const SETTINGS: ABACSettings = ABACSettings {
    match_types: true,
    enable_extensions: true,
    max_depth: 3,
    max_width: 3,
    enable_additional_attributes: false,
    enable_like: true,
    enable_action_groups_and_attrs: true,
    enable_arbitrary_func_call: true,
    enable_unknowns: false,
    enable_action_in_constraints: true,
};

impl<'a> Arbitrary<'a> for FuzzTargetInput {
    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
        let schema = schema::Schema::arbitrary(SETTINGS.clone(), u)?;
        let hierarchy = schema.arbitrary_hierarchy(u)?;
        let policy = schema.arbitrary_policy(&hierarchy, u)?;

        Ok(Self { schema, policy })
    }

    fn try_size_hint(
        depth: usize,
    ) -> std::result::Result<(usize, Option<usize>), MaxRecursionReached> {
        Ok(arbitrary::size_hint::and_all(&[
            schema::Schema::arbitrary_size_hint(depth)?,
            HierarchyGenerator::size_hint(depth),
        ]))
    }
}

fn smtlib_of_check_asserts(rust_asserts: &WellFormedAsserts<'_>) -> anyhow::Result<String> {
    Ok(RUNTIME.block_on(async {
        let mut solver =
            CedarSymCompiler::new(BuffSolver::new()).expect("solver construction should succeed");
        match solver.check_sat(rust_asserts).await {
            Ok(_) | Err(cedar_policy_symcc::err::Error::SolverUnknown) => {
                Ok(solver.solver_mut().contents())
            }
            Err(e) => Err(e),
        }
    })?)
}

// Fuzzing target checking that Term to SMT-LIB encodings generated by Lean and Rust SymCC implementations are equivalent
fuzz_target!(|input: FuzzTargetInput| {
    initialize_log();
    let len_engine = CedarLeanEngine::new();
    let lean_ffi = len_engine.get_ffi();
    let mut policyset = PolicySet::new();
    let policy: Policy = input.policy.into();
    policyset.add(policy.clone()).unwrap();
    debug!("Schema: {}\n", input.schema.schemafile_string());
    debug!("Policies: {policy}\n");

    if let Ok(schema) = Schema::try_from(input.schema) {
        for req_env in schema.request_envs().take(MAX_REQ_ENV_NUM) {
            if let Ok(sym_env) = SymEnv::new(&schema, &req_env) {
                // We let Rust to drive the term generation as it's faster than Lean
                if let Ok(rust_asserts) = compile_policies(
                    compile_always_allows,
                    &sym_env,
                    &policyset,
                    &req_env,
                    &schema,
                ) {
                    let lean_asserts = rust_asserts
                        .asserts()
                        .iter()
                        .map(|assert| assert.clone().into())
                        .collect();
                    debug!("Lean asserts: {lean_asserts:#?}");
                    match (
                        smtlib_of_check_asserts(&rust_asserts),
                        lean_ffi.smtlib_of_check_asserts(&lean_asserts, &schema, &req_env),
                    ) {
                        (Ok(rust_smtlib), Ok(lean_smtlib)) => {
                            similar_asserts::assert_eq!(
                                rust_smtlib,
                                lean_smtlib,
                                "Rust:\n{rust_smtlib}\nLean:\n{lean_smtlib}"
                            );
                        }
                        (Ok(_), Err(e)) => {
                            panic!("Lean encoding should succeed: {e}");
                        }
                        (Err(e), Ok(_)) => {
                            panic!("Rust encoding should succeed: {e}");
                        }
                        (Err(_), Err(_)) => {}
                    }
                }
            }
        }
    }
});
