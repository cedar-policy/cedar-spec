/*
 * Copyright Cedar Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#![no_main]
use cedar_drt::{logger::initialize_log, CedarLeanEngine};

use cedar_drt_inner::{
    fuzz_target,
    symcc::{compile_well_typed_policies, total_action_request_env_limit},
};

use cedar_policy::{Policy, PolicySet, Schema};

use cedar_policy_generators::{
    abac::ABACPolicy, hierarchy::HierarchyGenerator, schema, settings::ABACSettings,
};

use libfuzzer_sys::arbitrary::{self, Arbitrary, MaxRecursionReached, Unstructured};
use log::debug;
use std::{collections::BTreeSet, convert::TryFrom};

use cedar_policy_symcc::{compile_always_allows, term::Term, WellTypedPolicies};

/// Input expected by this fuzz target
#[derive(Debug, Clone)]
pub struct FuzzTargetInput {
    /// generated schema
    pub schema: schema::Schema,
    /// generated policy
    pub policy: ABACPolicy,
}

/// settings for this fuzz target
const SETTINGS: ABACSettings = ABACSettings {
    max_depth: 3,
    max_width: 3,
    total_action_request_env_limit: total_action_request_env_limit(),
    ..ABACSettings::type_directed()
};

impl<'a> Arbitrary<'a> for FuzzTargetInput {
    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
        let schema = schema::Schema::arbitrary(SETTINGS.clone(), u)?;
        let hierarchy = schema.arbitrary_hierarchy(u)?;
        let policy = schema.arbitrary_policy(&hierarchy, u)?;

        Ok(Self { schema, policy })
    }

    fn try_size_hint(
        depth: usize,
    ) -> std::result::Result<(usize, Option<usize>), MaxRecursionReached> {
        Ok(arbitrary::size_hint::and_all(&[
            schema::Schema::arbitrary_size_hint(depth)?,
            HierarchyGenerator::size_hint(depth),
        ]))
    }
}

// Fuzzing target checking that terms generated by Lean and Rust SymCC implementations are equivalent
fuzz_target!(|input: FuzzTargetInput| {
    initialize_log();
    let len_engine = CedarLeanEngine::new();
    let lean_ffi = len_engine.get_ffi();
    let mut policyset = PolicySet::new();
    let policy: Policy = input.policy.into();
    policyset.add(policy.clone()).unwrap();
    debug!("Schema: {}\n", input.schema.schemafile_string());
    debug!("Policies: {policy}\n");

    if let Ok(schema) = Schema::try_from(input.schema) {
        let lean_schema = lean_ffi.load_lean_schema_object(&schema).unwrap();
        for req_env in schema.request_envs() {
            // The validator DRT property we've been testing is that
            // rust_passes_validation => lean_passes_validation
            // So, we run the Rust validator first and obtain a well-typed
            // policy. This policy should be also well-typed according to Lean.
            if let Ok(well_typed_policies) =
                WellTypedPolicies::from_policies(&policyset, &req_env, &schema)
            {
                // We use `asserts_of_check_never_errors_on_original` instead
                // of `asserts_of_check_never_errors` because there are
                // discrepancies between the policies generated by Lean and Rust
                // validators. And the enforcer is senstive to such
                // discrepancies.
                match (
                    lean_ffi.asserts_of_check_always_allows_on_original(
                        &well_typed_policies.policy_set().clone().try_into().unwrap(),
                        lean_schema.clone(),
                        &req_env,
                    ),
                    compile_well_typed_policies(
                        compile_always_allows,
                        &well_typed_policies,
                        &schema,
                        &req_env,
                    ),
                ) {
                    (Ok(Ok(lean_asserts)), Ok(rust_asserts)) => {
                        let lean_asserts = lean_asserts
                            .into_iter()
                            .map(|t| Term::try_from(t).expect("term conversion should succeed"))
                            .collect::<BTreeSet<_>>();
                        let rust_asserts =
                            BTreeSet::from_iter(rust_asserts.as_ref().into_iter().cloned());
                        similar_asserts::assert_eq!(
                            lean_asserts,
                            rust_asserts,
                            "Lean terms: {lean_asserts:?}, Rust terms: {rust_asserts:?}"
                        );
                    }
                    (Ok(Ok(lean_asserts)), Err(err)) => {
                        debug!("Lean asserts: {lean_asserts:?}");
                        panic!("Rust errors while Lean does not: {err}")
                    }
                    (Err(err), Ok(_)) => {
                        panic!("Lean errors while Rust does not: {err}")
                    }
                    (Ok(Err(err)), Ok(_)) => {
                        panic!("Lean errors while Rust does not: {err}")
                    }
                    (_, _) => {}
                }
            }
        }
    }
});
