/*
 * Copyright Cedar Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#![no_main]
use cedar_drt::{logger::initialize_log, CedarLeanEngine};

use cedar_drt_inner::fuzz_target;

use cedar_policy::{Policy, PolicySet, Schema};

use cedar_policy_core::ast::StaticPolicy;
use cedar_policy_generators::{
    abac::ABACPolicy, hierarchy::HierarchyGenerator, schema, settings::ABACSettings,
};

use core::panic;
use libfuzzer_sys::arbitrary::{self, Arbitrary, MaxRecursionReached, Unstructured};
use log::debug;
use std::{collections::BTreeSet, convert::TryFrom};

use cedar_policy_symcc::{verify_always_allows, SymEnv, Term};

/// Input expected by this fuzz target:
/// An ABAC hierarchy, policy, and 8 associated requests
#[derive(Debug, Clone)]
pub struct FuzzTargetInput {
    /// generated schema
    pub schema: schema::Schema,
    /// generated policy
    pub policy: ABACPolicy,
}

/// settings for this fuzz target
const SETTINGS: ABACSettings = ABACSettings {
    match_types: true,
    enable_extensions: true,
    max_depth: 3,
    max_width: 3,
    enable_additional_attributes: false,
    enable_like: true,
    enable_action_groups_and_attrs: true,
    enable_arbitrary_func_call: true,
    enable_unknowns: false,
    enable_action_in_constraints: true,
};

impl<'a> Arbitrary<'a> for FuzzTargetInput {
    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
        let schema = schema::Schema::arbitrary(SETTINGS.clone(), u)?;
        let hierarchy = schema.arbitrary_hierarchy(u)?;
        let policy = schema.arbitrary_policy(&hierarchy, u)?;

        Ok(Self { schema, policy })
    }

    fn try_size_hint(
        depth: usize,
    ) -> std::result::Result<(usize, Option<usize>), MaxRecursionReached> {
        Ok(arbitrary::size_hint::and_all(&[
            schema::Schema::arbitrary_size_hint(depth)?,
            HierarchyGenerator::size_hint(depth),
            schema::Schema::arbitrary_policy_size_hint(&SETTINGS, depth),
            schema::Schema::arbitrary_request_size_hint(depth),
            schema::Schema::arbitrary_request_size_hint(depth),
            schema::Schema::arbitrary_request_size_hint(depth),
            schema::Schema::arbitrary_request_size_hint(depth),
            schema::Schema::arbitrary_request_size_hint(depth),
            schema::Schema::arbitrary_request_size_hint(depth),
            schema::Schema::arbitrary_request_size_hint(depth),
            schema::Schema::arbitrary_request_size_hint(depth),
        ]))
    }
}

// Fuzzing target checking that terms generated by Lean and Rust SymCC implementations are equivalent
fuzz_target!(|input: FuzzTargetInput| {
    initialize_log();
    let len_engine = CedarLeanEngine::new();
    let lean_ffi = len_engine.get_ffi();
    let mut policyset = PolicySet::new();
    let policy: Policy = input.policy.clone().into();
    policyset.add(policy.clone()).unwrap();
    debug!("Schema: {}\n", input.schema.schemafile_string());
    debug!("Policies: {policyset}\n");

    let mut core_policy_set = cedar_policy_core::ast::PolicySet::new();
    core_policy_set
        .add(StaticPolicy::from(input.policy).into())
        .unwrap();

    if let Ok(schema) = Schema::try_from(input.schema) {
        for req_env in schema.request_envs() {
            if let Ok(sym_env) = SymEnv::new(&schema, &req_env) {
                match lean_ffi.asserts_of_check_always_allows(&policyset, &schema, &req_env) {
                    Err(err) => {
                        panic!("Lean FFI errors: {err}")
                    }
                    Ok(res) => match (res, verify_always_allows(&core_policy_set, &sym_env)) {
                        (Ok(lean_asserts), Ok(rust_asserts)) => {
                            let lean_asserts = lean_asserts
                                .into_iter()
                                .map(|t| Term::try_from(t).expect("term conversion should succeed"))
                                .collect::<BTreeSet<_>>();
                            let rust_asserts =
                                BTreeSet::from_iter(rust_asserts.as_ref().into_iter().cloned());
                            assert_eq!(
                                lean_asserts, rust_asserts,
                                "Lean terms: {lean_asserts:?}, Rust terms: {rust_asserts:?}"
                            );
                        }
                        (Ok(_), Err(err)) => {
                            panic!("Rust SymCC errors: {err}")
                        }
                        (Err(err), Ok(_)) => {
                            panic!("Lean FFI errors: {err}")
                        }
                        (Err(_), Err(_)) => {}
                    },
                }
            }
        }
    }
});
