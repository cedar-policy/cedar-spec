name: Build and Test DRT

on:
  workflow_call:
    inputs:
      cedar_spec_ref:
        required: false
        default: "main"
        type: string
      cedar_policy_ref:
        required: false
        default: "main"
        type: string

jobs:
  build_and_test_drt:
    name: Build and test DRT
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - stable
    steps:
      - name: Checkout cedar-spec
        uses: actions/checkout@v4
        with:
          repository: cedar-policy/cedar-spec
          ref: ${{ inputs.cedar_spec_ref }}
          path: ./cedar-spec
      - name: checkout cedar
        uses: actions/checkout@v4
        with:
          repository: cedar-policy/cedar
          path: ./cedar-spec/cedar
          ref: ${{ inputs.cedar_policy_ref }}
      - name: Install Lean
        shell: bash
        run: |
              wget https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh
              bash elan-init.sh -y
      - name: Install protoc
        run: sudo apt-get update && sudo apt-get install protobuf-compiler
      - name: Prepare Rust build
        run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }} && rustup component add rustfmt
      - name: cargo fmt (cedar-policy-generators)
        working-directory: ./cedar-spec/cedar-policy-generators
        run: cargo fmt --all --check
      - name: cargo fmt (cedar-drt)
        working-directory: ./cedar-spec/cedar-drt
        run: cargo fmt --all --check
      - name: cargo fmt (cedar-drt/fuzz/)
        working-directory: ./cedar-spec/cedar-drt/fuzz
        run: cargo fmt --all --check
      - name: cargo build (cedar-policy-generators)
        working-directory: ./cedar-spec/cedar-policy-generators
        run: RUSTFLAGS="-D warnings -F unsafe-code" cargo build --verbose
      - name: cargo test (cedar-policy-generators)
        working-directory: ./cedar-spec/cedar-policy-generators
        run: cargo test --verbose
      - name: Build Lean libraries
        working-directory: ./cedar-spec/cedar-lean
        run: source ~/.profile && ../cedar-drt/build_lean_lib.sh
      - name: cargo build (cedar-drt/)
        shell: bash
        working-directory: ./cedar-spec/cedar-drt
        run: source ~/.profile && source set_env_vars.sh && cargo build
      - name: cargo build (cedar-drt/fuzz/)
        working-directory: ./cedar-spec/cedar-drt/fuzz
        run: source ~/.profile && source ../set_env_vars.sh && RUSTFLAGS="--cfg=fuzzing" cargo build
      - name: cargo test (cedar-drt/fuzz/)
        working-directory: ./cedar-spec/cedar-drt/fuzz
        run: source ~/.profile && source ../set_env_vars.sh && cargo test -- --nocapture
      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz
      - name: Install cvc5
        shell: bash
        run: |
              ARCH=$(uname -m)
              if [ "$ARCH" = "x86_64" ]; then
                ARCH_NAME="x86_64"
              elif [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then
                ARCH_NAME="arm64"
              else
                echo "Unsupported architecture: $ARCH"
                exit 1
              fi
              wget https://github.com/cvc5/cvc5/releases/download/cvc5-1.2.1/cvc5-Linux-${ARCH_NAME}-static.zip
              unzip cvc5-Linux-${ARCH_NAME}-static.zip
              chmod +x cvc5-Linux-${ARCH_NAME}-static/bin/cvc5
              echo "CVC5=$GITHUB_WORKSPACE/cvc5-Linux-${ARCH_NAME}-static/bin/cvc5" >> $GITHUB_ENV
      - name: Dry run fuzz targets
        working-directory: ./cedar-spec/cedar-drt
        run: source ~/.profile && source set_env_vars.sh && ./dry_run_fuzz_targets.sh
