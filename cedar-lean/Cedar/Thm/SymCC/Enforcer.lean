/-
 Copyright Cedar Contributors

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-/

import Cedar.SymCC.Enforcer
import Cedar.Thm.SymCC.Enforcer.Enforce

/-!
This file proves key lemmas for the strong well-formedness assumptions for
policies, generated by the `enforce` function in `Cedar.SymCC.Enforcer`.
--/

namespace Cedar.Thm

open Data Spec SymCC Factory

theorem swf_implies_enforce_satisfiedBy {ps : Policies} {env : Env} {εnv : SymEnv} {I : Interpretation} {assumes : Asserts} :
  env ∼ εnv.interpret I →
  I.WellFormed εnv.entities →
  εnv.StronglyWellFormedForPolicies ps →
  env.StronglyWellFormedForPolicies ps →
  enforce (ps.map Policy.toExpr) εnv = Set.mk assumes →
  assumes.satisfiedBy I
:= enforce_satisfiedBy_swf

theorem enforce_satisfiedBy_implies_exists_swf_extract? {ps : Policies} {εnv : SymEnv} {I : Interpretation} {assumes : Asserts} :
  εnv.StronglyWellFormedForPolicies ps →
  I.WellFormed εnv.entities →
  enforce (ps.map Policy.toExpr) εnv = Set.mk assumes →
  assumes.satisfiedBy I →
  ∃ (I' : Interpretation) (env : Env),
    env = εnv.extract? (ps.map Policy.toExpr) I ∧
    I'.WellFormed εnv.entities ∧
    env ∼ εnv.interpret I' ∧
    env.StronglyWellFormedForPolicies ps ∧
    ∀ p t, p ∈ ps → compile p.toExpr εnv = .ok t → t.interpret I = t.interpret I'
:= by
  intro hsε hI hok hsat
  have ⟨I', env, heqₑ, hI', heq', hse, hps⟩ := enforce_satisfiedBy_implies_swf_extract? hsε hI hok hsat
  exists I', env
  simp only [heqₑ, hI', heq', Env.StronglyWellFormedForPolicies, hse, true_and]
  intro p t hin hr
  specialize hps p.toExpr t
  simp only [List.mem_map, forall_exists_index, and_imp] at hps
  exact hps p hin rfl hr

theorem enforce_satisfiedBy_implies_exists_swf {ps : Policies} {εnv : SymEnv} {I : Interpretation} {assumes : Asserts} :
  εnv.StronglyWellFormedForPolicies ps →
  I.WellFormed εnv.entities →
  enforce (ps.map Policy.toExpr) εnv = Set.mk assumes →
  assumes.satisfiedBy I →
  ∃ (I' : Interpretation) (env : Env),
    I'.WellFormed εnv.entities ∧
    env ∼ εnv.interpret I' ∧
    env.StronglyWellFormedForPolicies ps ∧
    ∀ p t, p ∈ ps → compile p.toExpr εnv = .ok t → t.interpret I = t.interpret I'
:= by
  intro hsε hI hok hsat
  have ⟨I', env, _, _, _⟩ := enforce_satisfiedBy_implies_exists_swf_extract? hsε hI hok hsat
  exists I', env

end Cedar.Thm
